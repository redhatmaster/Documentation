Linux
================
1. Booting Procedure

STEP-1: Power Supply ---> ac current-----> SMPS(Swithing Mode Power Supply)----> convert to dc current ------> PowerGood Signal

# A timer in the MotherBoard will be sending reset signal to CPU untill PowerGood Signal.

STEP-2: After PowerGood Signal is recieved to the motherboard, resetting is stopped and CPU searches for Instructions in ROM.
# ROM [ FFFF:0000h] only one instruction set which is last region of ROM called JUMP command tells BIOS program Location

STEP-3: BIOS gets 

POST (power on self test) triggered which undergoes Warm Start--------> Intigrety check for h/w components 
                                                                          [timerICs ,DMA Controler ,CPU,Vedio RAM]
                                                    and Cold Start------> [Motherboard keyboard printer port Hardrive]


BIOS Check -----> CMOS settings (RAM)
                  -------------------
               Boot Order - OS location to boot 
                    1.CD ROM
                    2.HARD DISK
                    ....
 
 STEP-4: MBR (Master Boot Record) and GRUB (Grand Unified Boot Loader)
 
 BIOS ----> finds ------> MBR in Harddisk [Boot Sector - 1st sector of Hard disk(512MB)] ----> loads contents of MBR ----> RAM
 MBR -----> initialises ---------> GRUB - 1st stage of Boot Loader
 
 # GRUB 1st Stage: Sector 0 : GRUB 1st Stage of boot loader looks for the flag in Partition Table to know which partition has to be searched for KERNAL
                   KERNAL SEARCH: GRUB Loads file system drivers (s/w that manager h/w controllers) inorder to access /boot/grub/grub.conf for Kernal Path.
 # GRUB 2nd Stage : Loads Kernal image and Initrd.
  Loading Kernal Image : Kernal Image is a Compressed file - executable bz image file.Kernal loads temporary file system before
                         loading ROOT file system  with insmod and rmmod commands in initrd image.
                         Kernal is now loaded to memory and executes 1st User space program called /sbin/init whose pid is 1
                         and looks for /etc/initab conf file for default Run level.  
              
 
2.UserManagement
---------------------------------------------
USer config files :  
---------------------------------------
/etc/passwd - uname:psw:uid:gid:comments:homedir:shell
/etc/group - uname:pwd:uid:gname
/etc/shadow - uname:encryptedpsw:lastpswchange:min:max:warn:inactive:expire

These are the two files which contain the default values to be assigned to a user when created using useradd
# less /etc/default/useradd
GROUP=100
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/bash
SKEL=/etc/skel
CREATE_MAIL_SPOOL=yes

You can also view the default parameters set for new user to be created using
# useradd -D
GROUP=100
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/bash
SKEL=/etc/skel
CREATE_MAIL_SPOOL=yes

The second file containing values used by useradd command for UID, GID, password encryption method and expiry related information
# less /etc/login.defs
MAIL_DIR        /var/spool/mail

PASS_MAX_DAYS   99999
PASS_MIN_DAYS   0
PASS_MIN_LEN    5
PASS_WARN_AGE   7

UID_MIN                   500
UID_MAX                 60000

GID_MIN                   500
GID_MAX                 60000

CREATE_HOME     yes
UMASK           077

USERGROUPS_ENAB yes
ENCRYPT_METHOD SHA512

How to change default values of useradd command?

Either you can open /etc/default/useradd file and edit the file or you can also do the same using CLI as shown below

To change the default home directory location for all new users
# useradd -D -b /opt/users

# useradd -D | grep HOME
HOME=/opt/users

To change the default login shell
# useradd -D -s /bin/sh

# useradd -D | grep -i shell
SHELL=/bin/sh

Now what if you want to add custom arguments to your user while creating them. 
let us discuss in detail the different options which you can use along with useradd command

2. Create multiple users with same UID
# useradd -o deepak -u 501
# useradd -o deep -u 501
# useradd -o user -u 501

Verify the UID of the newly create users
# grep 501 /etc/passwd
deepak:x:501:501::/home/deepak:/bin/sh
deep:x:501:504::/home/deep:/bin/sh
user:x:501:505::/home/user:/bin/sh

3. Manually assign a UID to the user

By default a user automatically gets any free uid more than 500 when you run the useradd command. But what if you manually want to assign a uid to your user


# useradd -u 550 deepak

Let us verify the assigned uid to deepak
# id deepak
uid=550(deepak) gid=550(deepak) groups=550(deepak)

4. Create user without home directory
# useradd -M test

# su - test
su: warning: cannot change directory to /home/test: No such file or directory

-bash-4.1$ pwd
/root

5. Create user with custom defined home directory
# useradd -d /home/users/test test

# su - test

$ pwd
/home/users/test

6. Add user to different primary group
By default when you run useradd command, a group with the same name is created inside /etc/group but what if you donot want a group to be created with the same name instead add the user to some different already existing group.

Here we will create a user "deep" and add him to group "admin" without creating another "deep" group
# useradd -g admin deep

Verify the groups of user "deep"

# groups deep
deep : admin

7. Add user to different secondary group

In the above command you saw if we are mentioning a different primary group while using useradd command then a default group with the name of user is NOT created. Now what if you want a group with username's to be created but instead you want the user to add some secondary group.

Here user deepak is created along with group deepak but also in the same command we are adding deepak to dba group
# useradd  -G dba deepak

Verify groups of deepak
# groups deepak
deepak : deepak dba

8. Add user to multiple groups
You can add the user to multiple secondary groups using single command
# useradd -G admin,dba deepak

Verify
# groups deepak
deepak : deepak admin dba

Creating a user along with encrypted password
Now you can create a user with pre-defined password, but the condition is the password used should be encrypted which you can do with various methods. Here I will show you one method to do so

Encrypt your password using below command
# openssl passwd -crypt mypassw0rd
Warning: truncating password to 8 characters
TuUFdiN1KaCHQ

Now you can use the encrypted password for your new user
# useradd -p TuUFdiN1KaCHQ deepak

id <username>

finger <username>

useradd -e 2014-03-27 -f 45 <username>

useradd :- -u,-d,-g,-G,-s,-o ,-e,-f,-R,-p,-M
usermod :- -d,-g,-G,-s,-o ,-e,-f,-R,-p,-M,-a

-a, --append                  append the user to the supplemental GROUPS
                                mentioned by the -G option without removing
                                him/her from other groups

usermod -a -G testuser,testuser1,cryptuser test3

userdel :- -f force some actions that would fail otherwise
              e.g. removal of user still logged in
           -r remove home directory and mail spool

Create multiple users :newusers <file>

chage
------------------------------------
chage <username>

  Minimum Password Age [10]: 
	Maximum Password Age [99999]: 
	Last Password Change (YYYY-MM-DD) [2017-11-25]: 
	Password Expiration Warning [7]: 
	Password Inactive [-1]: 
	Account Expiration Date (YYYY-MM-DD) [-1]:

chage -l <username>

user permisions, restrictions
--------------------------------------
chmod <u/g/o/a><+/-><r/w/r> <file>

change ownership of file

chown username: myfolder
chown :groupname myfolder
chown username:groupname myfolder

setfacl -m u:username:rwx folder/filename
getfacl -a <filename>

Special permisions : When a command or script with SUID bit set is run, 
                     its effective UID becomes that of the owner of the file,
		     rather than of the user who is running it.
		     Example : /usr/bin/passwd command.

setuid : chmod u+s <username>
setgid : chmod g+s <username>
stickybit : chmod o+t <username>

3 files are automatically created in users home directory: 
.bashrc
.bash_profile
.bash_history

Difference between .bash_profile and .bashrc
Every time you login to a Linux (Red Hat) machine .bash_profile file is executed
but
In case you are already logged in and you open a new terminal then .bashrc file is executed


SUDO users , sudoers file
---------
-------------------------------
root ALL=(ALL)ALL
ADMIN TTY=(USER)COMMAND

3.filesystem 
-------------
FS tree

file/directory permissions
redirection std/std out
file permisions
mounting
links

4.Network Management
------------------
network configuration
firewall
iptables

5.Process Management
------------------
process
hidden process
cpu and mem utilization
services and daemons


6.Package management
-----------------
YUM
RPM
apt-get
alternatives
curl
wget

7.Others
--------------------
scheduling jobs
RUN Levels


8.Scripting
================
environment variables
echo 
file operations
grep, sed, find, redirection and piping
exracting data from files
loops, conditions


9.Devops
================
9-1.GIT
Done!! Documentation pending
9-2.GRADLE
Gradle builds and types
9-3 maven and ant 
9-4.JENKINS

9-5.DOCKER,DOCKER-COMPOSE

9-6.ANSIBLE

Ansible setup
Ansible env setup : ssh,java,git,gradle,tomcat,tomcat users for Jenkins integration,docker,dockercompose.
Ansible aws instance : ec2
Ansible jenkins integration
Ansible containers configuration

9-7.AWS 
