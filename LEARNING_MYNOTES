Linux
================
1. Booting Procedure

STEP-1: Power Supply ---> ac current-----> SMPS(Swithing Mode Power Supply)----> convert to dc current ------> PowerGood Signal

# A timer in the MotherBoard will be sending reset signal to CPU untill PowerGood Signal.

STEP-2: After PowerGood Signal is recieved to the motherboard, resetting is stopped and CPU searches for Instructions in ROM.
# ROM [ FFFF:0000h] only one instruction set which is last region of ROM called JUMP command tells BIOS program Location

STEP-3: BIOS gets 

POST (power on self test) triggered which undergoes Warm Start--------> Intigrety check for h/w components 
                                                                          [timerICs ,DMA Controler ,CPU,Vedio RAM]
                                                    and Cold Start------> [Motherboard keyboard printer port Hardrive]


BIOS Check -----> CMOS settings (RAM)
                  -------------------
               Boot Order - OS location to boot 
                    1.CD ROM
                    2.HARD DISK
                    ....
 
 STEP-4: MBR (Master Boot Record) and GRUB (Grand Unified Boot Loader)
 
 BIOS ----> finds ------> MBR in Harddisk [Boot Sector - 1st sector of Hard disk(512MB)] ----> loads contents of MBR ----> RAM
 MBR -----> initialises ---------> GRUB - 1st stage of Boot Loader
 
 # GRUB 1st Stage: Sector 0 : GRUB 1st Stage of boot loader looks for the flag in Partition Table to know which partition 
                              has to be searched for KERNAL
                          KERNAL SEARCH: GRUB Loads file system drivers (s/w that manager h/w controllers) inorder to access
		          /boot/grub/grub.conf for Kernal Path.
 # GRUB 2nd Stage : Loads Kernal image and Initrd.
  Loading Kernal Image : Kernal Image is a Compressed file - executable bz image file.Kernal loads temporary file system before
                         loading ROOT file system  with insmod and rmmod commands in initrd image.
                         Kernal is now loaded to memory and executes 1st User space program called /sbin/init whose pid is 1
                         and looks for /etc/initab conf file for default Run level.  
              
 
2.UserManagement
---------------------------------------------
USer config files :  
---------------------------------------
/etc/passwd - uname:psw:uid:gid:comments:homedir:shell
/etc/group - uname:pwd:uid:gname
/etc/shadow - uname:encryptedpsw:lastpswchange:min:max:warn:inactive:expire

These are the two files which contain the default values to be assigned to a user when created using useradd
# less /etc/default/useradd
GROUP=100
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/bash
SKEL=/etc/skel
CREATE_MAIL_SPOOL=yes

You can also view the default parameters set for new user to be created using
# useradd -D

The second file containing values used by useradd command for UID, GID, password encryption method and expiry related information
# less /etc/login.defs
MAIL_DIR        /var/spool/mail

PASS_MAX_DAYS   99999
PASS_MIN_DAYS   0
PASS_MIN_LEN    5
PASS_WARN_AGE   7

UID_MIN                   500
UID_MAX                 60000

GID_MIN                   500
GID_MAX                 60000

CREATE_HOME     yes
UMASK           077

USERGROUPS_ENAB yes
ENCRYPT_METHOD SHA512

How to change default values of useradd command?

Either you can open /etc/default/useradd file and edit the file or you can also do the same using CLI as shown below

To change the default home directory location for all new users
# useradd -D -b /opt/users

# useradd -D | grep HOME
HOME=/opt/users

To change the default login shell
# useradd -D -s /bin/sh

# useradd -D | grep -i shell
SHELL=/bin/sh

Now what if you want to add custom arguments to your user while creating them. 
2. Create multiple users with same UID
# useradd -o deepak -u 501
# useradd -o deep -u 501
# useradd -o user -u 501

Verify the UID of the newly create users
# grep 501 /etc/passwd
deepak:x:501:501::/home/deepak:/bin/sh
deep:x:501:504::/home/deep:/bin/sh
user:x:501:505::/home/user:/bin/sh

4. Create user without home directory
# useradd -M test

5. Create user with custom defined home directory
# useradd -d /home/users/test test

6. Add user to different primary group
# useradd -g admin deep

Verify the groups of user "deep"

# groups deep
deep : admin

7. Add user to different secondary group

# useradd  -G dba deepak

Verify groups of deepak
# groups deepak
deepak : deepak dba

8. Add user to multiple groups
You can add the user to multiple secondary groups using single command
# useradd -G admin,dba deepak

Creating a user along with encrypted password
Now you can create a user with pre-defined password, but the condition is the password used should be encrypted which you can do with various methods. Here I will show you one method to do so

Encrypt your password using below command
# openssl passwd -crypt mypassw0rd
Warning: truncating password to 8 characters
TuUFdiN1KaCHQ

Now you can use the encrypted password for your new user
# useradd -p TuUFdiN1KaCHQ deepak

id <username>

finger <username>

useradd -e 2014-03-27 -f 45 <username>

useradd :- -u,-d,-g,-G,-s,-o ,-e,-f,-R,-p,-M
usermod :- -d,-g,-G,-s,-o ,-e,-f,-R,-p,-M,-a

-a, --append                  append the user to the supplemental GROUPS
                                mentioned by the -G option without removing
                                him/her from other groups

usermod -a -G testuser,testuser1,cryptuser test3

userdel :- -f force some actions that would fail otherwise
              e.g. removal of user still logged in
           -r remove home directory and mail spool

Create multiple users :newusers <file>

chage
------------------------------------
chage <username>

        Minimum Password Age [10]: 
	Maximum Password Age [99999]: 
	Last Password Change (YYYY-MM-DD) [2017-11-25]: 
	Password Expiration Warning [7]: 
	Password Inactive [-1]: 
	Account Expiration Date (YYYY-MM-DD) [-1]:

chage -l <username>

user permisions, restrictions
--------------------------------------
chmod <u/g/o/a><+/-><r/w/r> <file>

change ownership of file

chown username: myfolder
chown :groupname myfolder
chown username:groupname myfolder

setfacl -m u:username:rwx folder/filename
getfacl -a <filename>

Special permisions : When a command or script with SUID bit set is run, 
                     its effective UID becomes that of the owner of the file,
		     rather than of the user who is running it.
		     Example : /usr/bin/passwd command.

setuid : chmod u+s <username>
setgid : chmod g+s <username>
stickybit : chmod o+t <username>

3 files are automatically created in users home directory: 
.bashrc
.bash_profile
.bash_history

Difference between .bash_profile and .bashrc
Every time you login to a Linux (Red Hat) machine .bash_profile file is executed
but
In case you are already logged in and you open a new terminal then .bashrc file is executed


SUDO users , sudoers file
---------
-------------------------------
root ALL=(ALL)ALL
ADMIN TTY=(USER)COMMAND

3.FILESYSTEM
===============================================================

FS tree
------------------------------
Directory	Content
/bin	Common programs, shared by the system, the system administrator and the users.
/boot	The startup files and the kernel, vmlinuz. In some recent distributions also grub data. Grub is the GRand Unified Boot loader and is an attempt to get rid of the many different boot-loaders we know today.
/dev	Contains references to all the CPU peripheral hardware, which are represented as files with special properties.
/etc	Most important system configuration files are in /etc, this directory contains data similar to those in the Control Panel in Windows
/home	Home directories of the common users.
/initrd	(on some distributions) Information for booting. Do not remove!
/lib	Library files, includes files for all kinds of programs needed by the system and the users.
/lost+found	Every partition has a lost+found in its upper directory. Files that were saved during failures are here.
/misc	For miscellaneous purposes.
/mnt	Standard mount point for external file systems, e.g. a CD-ROM or a digital camera.
/net	Standard mount point for entire remote file systems
/opt	Typically contains extra and third party software.
/proc	A virtual file system containing information about system resources. More information about the meaning of the files in proc is obtained by entering the command man proc in a terminal window. The file proc.txt discusses the virtual file system in detail.
/root	The administrative user's home directory. Mind the difference between /, the root directory and /root, the home directory of the root user.
/sbin	Programs for use by the system and the system administrator.
/tmp	Temporary space for use by the system, cleaned upon reboot, so don't use this for saving any work!
/usr	Programs, libraries, documentation etc. for all user-related programs.
/var	Storage for all variable files and temporary files created by users, such as log files, the mail queue, the print spooler area, space for temporary storage of files downloaded from the Internet, or to keep an image of a CD before burning it.


Directories: files that are lists of other files.

Special files: the mechanism used for input and output. Most special files are in /dev.

Links: a system to make a file or directory visible in multiple parts of the system's file tree. 
(Domain) sockets: a special file type, similar to TCP/IP sockets, 
                 providing inter-process networking protected by the file system's access control.

Named pipes: act more or less like sockets and form a way for processes to communicate with each other, 
             without using network socket semantics.

Symbol	Meaning
-	Regular file
d	Directory
l	Link
c	Special file
s	Socket
p	Named pipe
b	Block device

data partition: normal Linux system data, including the root partition containing all the data to start up and run the system; and

Swap partition: expansion of the computer's physical memory, extra memory on hard disk.

Other Partitions
----------------------
a partition for user programs (/usr)

a partition containing the users' personal data (/home)

a partition to store temporary data like print- and mail-queues (/var)

a partition for third party and extra software (/opt)
    
Fdisk :
--------------

df and du commands:
----------------------



file/directory permissions

The file system in reality :
------------------------------------

For most users and for most common system administration tasks, it is enough to accept that files and directories are ordered in a tree-like structure. The computer, however, doesn't understand a thing about trees or tree-structures.

Every partition has its own file system. By imagining all those file systems together, we can form an idea of the tree-structure of the entire system, but it is not as simple as that. In a file system, a file is represented by an inode, a kind of serial number containing information about the actual data that makes up the file: to whom this file belongs, and where is it located on the hard disk.

Every partition has its own set of inodes; throughout a system with multiple partitions, files with the same inode number can exist.

Each inode describes a data structure on the hard disk, storing the properties of a file, including the physical location of the file data. When a hard disk is initialized to accept data storage, usually during the initial system installation process or when adding extra disks to an existing system, a fixed number of inodes per partition is created. This number will be the maximum amount of files, of all types (including directories, special files, links etc.) that can exist at the same time on the partition. We typically count on having 1 inode per 2 to 8 kilobytes of storage.

At the time a new file is created, it gets a free inode. In that inode is the following information:

    Owner and group owner of the file.
    File type (regular, directory, ...)
    Permissions on the file
    Date and time of creation, last read and change.
    Date and time this information has been changed in the inode.
    Number of links to this file.
    File size
    An address defining the actual location of the file data.

The only information not included in an inode, is the file name and directory. These are stored in the special directory files. By comparing file names and inode numbers, the system can make up a tree-structure that the user understands. Users can display inode numbers using the -i option to ls. The inodes have their own separate space on the disk.

HARD and SOFT Links:
----------------------------
Hard link: Associate two or more file names with the same inode. Hard links share the same data blocks on the hard disk, while they continue to behave as independent files.

There is an immediate disadvantage: hard links can't span partitions, because inode numbers are only unique within a given partition.

Soft link or symbolic link (or for short: symlink): a small file that is a pointer to another file. A symbolic link contains the path to the target file instead of a physical location on the hard disk. Since inodes are not used in this system, soft links can span across partitions.

Creating symbolic links:
------------------------------------------------------------

The symbolic link is particularly interesting for beginning users: they are fairly obvious to see and you don't need to worry about partitions.

The command to make links is ln. In order to create symlinks, you need to use the -s option:

ln -s targetfile linkname

*** Symbolic links are always very small files, while hard links have the same size as the original file.

redirection std/std out
file permisions
mounting

4.Network Management
------------------
network configuration
firewall
iptables

5.Process Management
------------------
process
hidden process
cpu and mem utilization
services and daemons

Performance and Memory Management
=================================

Clear Linux Memory Buffer Cache
--------------------------------

free -m 

There are three options available to flush cache of Linux memory. Use one of below as per your requirements.

    Free pagecache, dentries and inodes in cache memory

    sync; echo 3 > /proc/sys/vm/drop_caches

    Free dentries and inodes use following command

    sync; echo 2 > /proc/sys/vm/drop_caches

    Free pagecache only use following command

    sync; echo 1 > /proc/sys/vm/drop_caches


Disk Partitioning and File system Resizing
-------------------------------------------
Create partition and Filesystem
-------------------------------
1) Create one or more partitions using fdisk:

    fdisk  /dev/sdb
    N (new partition)
    p (primary partition)

    Accept default initial and end blocks if you want to create a single partiton with the whole disk

    w (write the information and quit) 

2) check the new partition

    [root@vmractest3 root]# fdisk -l

 3) Format the new partition as an ext3 file system type:

    /sbin/mkfs -t ext3 /dev/sdb1 

4)Assigning a Label with e2label

    Once you have created and formated a partition,

    you should assign it a label using the e2label command. This allows you

    to add the partition to /etc/fstab using a label instead of using a

    device path, thereby making the system more robust. [1] To add a label

    to a partition, type the following command as root:

    /sbin/e2label /dev/s db1 /oradisk 

5) Then add the new partition to /etc/fstab, this way it will be mounted at reboot:

    To check the label use this command:

    [root@vmractest3 root]# /sbin/tune2fs -l /dev/sdb1 |grep volume

    Filesystem volume name:   /oradisk

    vi /etc/fstab and add the following line:

    LABEL=/oradisk          /oradisk                ext3    defaults        1 2 

6) Mount the new file system:

    First create the base directory and assign it to the user that will own it

    [root@vmractest3 root]# mkdir /oradisk

    [root@vmractest3 root]#chown oracle:dba /oradisk

    Then mount it

    [root@vmractest3 root]# mount /dev/sdb1 /oradisk

    And check it

    [root@vmractest3 root]# df -k

Resize Filesystem
------------------
Unmount Filesystem -- /etc/fstab can be reffered for available Filesystems and disk partitions.
Delete the existing disk partition and create new partition with fdisk command.
fdisk <partition>
Delete partition
create new partition with required size
Save (w) .
Run e2fsck <disk/partition>
resize2fs <partition>
mount <partition> <filesystem>


6.Package management
-----------------
YUM
RPM
apt-get
alternatives
curl
wget

make : Used to re-compile exectable inorder to install programs.
       Troubleshooting : dependent libraries - Devel libs, add exectables to /usr/local/bin , 
       Export path variable to /usr/local/bin path.


7.Others
--------------------
scheduling jobs
RUN Levels


8.Scripting
================
environment variables
echo 
file operations
grep, sed, find, redirection and piping
exracting data from files
loops, conditions


9.Devops
================

9-1.GIT

Basic commands
-------------------------
ssh -T git@github.com
git clone <linktorepository>
git status -s
git config --global user.name <username>
git config --global user.mail <email>
git commit -m "<message>"
git pull origin master
git push origin master
git log

Advanced:
==============
GIT : how to branch, merge, squash, stash, and patch ?

Git stash: saving half done work. git stash apply will revert , git stash apply <specific stash>.

Git patch : is used to share a branch commit to another developer. 
           git format-patch master --stdout > fixemptyposter.patch

Git octopus merge
-----------------------
git merge <branch1> <branch2>.. <branchn>

[git merge-distinct]

GIT Squash and Rebase
-----------------------------
Both git merge --squash and git rebase --interactive can produce a "squashed" commit.
But they serve different purposes.

    git merge --squash abranch

will produce a squashed commit on the destination branch, without marking any merge relationship.
(Note: it does not produce a commit right away: you need an additional git commit -m "squash branch")
This is useful if you want to throw away the source branch completely, going from (schema taken from SO question):

 git checkout stable

      X                   stable
     /                   
a---b---c---d---e---f---g tmp

to:

git merge --squash tmp
git commit -m "squash tmp"

      X-------------------G stable
     /                   
a---b---c---d---e---f---g tmp

and then deleting tmp branch.

    git rebase --interactive

replays some or all of your commits on a new base, allowing you to squash (or more recently "fix up", see this SO question), going directly to:

git checkout tmp
git rebase -i stable

      stable
      X-------------------G tmp
     /                     
a---b

If you choose to squash all commits of tmp (but, contrary to merge --squash, you can choose to replay some, and squashing others).

So the differences are:

    merge does not touch your source branch (tmp here) and creates a single commit where you want.
    rebase allows you to go on on the same source branch (still tmp) with:
        a new base
        a cleaner history

use git rebase -i to collapse all my commits into one commit and re-write the commit message. Then I send it upstream. 
Note : This action is to be performed when yo are on master branch locally.



Say your bug fix branch is called bugfix and you want to merge it into master:

git checkout master
git merge --squash bugfix
git commit

This will take all the commits from the bugfix branch, squash them into 1 commit and then merge it with your master branch.

Git merge squash
git checkout

Delete brances local and remote
----------------------------------------------
To remove a local branch from your machine:

git branch -d {the_local_branch} 
(use -D instead to force deletion without checking merged status)

To remove a remote branch from the server:

git push origin --delete {the_remote_branch}
        

Merging two commits to one
-------------------------------------------
Running : git rebase --interactive HEAD~2 gives you an editor with

pick b76d157 b
pick a931ac7 c

# Rebase df23917..a931ac7 onto df23917
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like "squash", but discard this commit's log message
#
# If you remove a line here THAT COMMIT WILL BE LOST.
# However, if you remove everything, the rebase will be aborted.

change c to squash. and save-quitting your editor, you'll get another editor whose contents are

# This is a combination of 2 commits.
# The first commit's message is:

b

# This is the 2nd commit message:

c

When you save and quit, the contents of the edited file become commit message of the new combined commit:

$ git log --pretty=oneline
18fd73d3ce748f2a58d1b566c03dd9dafe0b6b4f b and c
df239176e1a2ffac927d8b496ea00d5488481db5 a


Done!! Documentation pending
9-2.GRADLE

Gradle builds and types 
Gradle Plugins - war, java, base. custom
Gradle artifactory

9-3 maven and ant 

9-4.JENKINS
========================================================================
Jenkins is integrated with these two components:

    Version Control system like GIT,SVN
    And build tools like Apache Maven.

# Master slave configuration : 

1. http://www.infobeans.com/opensourceblog/miscellaneous/jenkins-master-slave-configuration/

2. https://www.quora.com/What-is-the-use-of-master-and-slave-in-Jenkins

# Triggering a Jenkins build from a push to Github : 
  https://medium.com/@marc_best/trigger-a-jenkins-build-from-a-github-push-b922468ef1ae

# To notify developers about build report success or failure, it is integrated with LDAP mail server: 
  Configure openldap and create test ldap users.

# Move or copy Jenkins from one server to another

# Commands used to start Jenkins manually
  

    (Jenkins_url)/restart: Forces a restart without waiting for builds to complete.
    (Jenkin_url)/safeRestart: Allows all running builds to complete.

# Clone a Git repository via Jenkins

Example : With simple steps, maven release project is automated


Some of the important plugins in Jenkin includes

• Maven 2 project
• Amazon EC2
• HTML publisher
• Copy artifact
• Join
• Green Balls

deploy a custom build of a core plugin?

To deploy a custom field of a core plugin, you have to do following things

• Stop Jenkins
• Copy the custom HPI to $Jenkins_Home/plugins
• Delete the previously expanded plugin directory
• Make an empty file called .hpi.pinned
• Start Jenkins

9-5.DOCKER,DOCKER-COMPOSE

Docker Network:
-----------------------
Port Mapping : docker run -ti -p <hostport>:<containerport> container/imagename
               docker port <containerid>
	       

Ip Address :
------------
Types : 
1. Bridge - Default
2. Host
3. Container
also there are custom networking , Overlay network

docker network ls
docker run -tid --name=<container1> <websphere-liberty>
docker run -tid --name=<container2> <ubuntu>
docker network create -d bridge --subnet 172.25.0.0/16 isolated_rw
docker network connect isolated_rw container2
docker network inspect isolated_rw
ifconfig -a
docker attach container2

9-6.ANSIBLE

Refer to Ansible repository:
----------------------------
Modules i know
--------------------
shell
yum
yum: state=<> name={{ item }}
 with_items:
 - pkg1
 - pkg2
....
yum_repository
get_url
fetch
file
blockinfile
bnf
unarchive
docker_service
roles

Ansible setup
Ansible env setup : ssh,java,git,gradle,tomcat,tomcat users for Jenkins integration,docker,dockercompose.
Ansible aws instance : ec2
Ansible jenkins integration
Ansible containers configuration
Ansible dynamic inventory- aws

Ansible roles - done

9-7.AWS 

10 LAMP setup

11 Server Hardening

12 Redhat Satellite

 Install Red Hat Satellite 6.
·         Red Hat Network organizations, locations, users and roles.
·         Manage software with Red Hat Satellite environments and content view.
·         Create custom RPM packages
·         Use Red Hat Satellite to configure hosts with Puppet.
·         Provision hosts with integrated software and configuration management.
·         Implement Metal-as-a Service (MaaS) with Satellite discovery and provisioning of unprovisioned hosts.
