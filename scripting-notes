$#    Stores the number of command-line arguments that 
      were passed to the shell program.
$?    Stores the exit value of the last command that was 
      executed.
$0    Stores the first word of the entered command (the 
      name of the shell program).
$*    Stores all the arguments that were entered on the
      command line ($1 $2 ...).
"$@"  Stores all the arguments that were entered
      on the command line, individually quoted ("$1" "$2" ...)
$$ gives the process id of the currently executing process 
$! shows the process id of the process that recently went into background.

Syntax
-------------------------------------
if
============

if i in [1..99] then
echo "Hi"
fi

if nested
============
read value
if (( "$value"=="y" || "$value"=="Y" )); then
echo "YES"
elif (( "$value"=="N" || "$value"=="n" )); then
echo "NO"
else
echo "please enter valid input : 'Y', 'y', 'N', 'n'"
fi

#!/bin/bash
read x
read y
if (($x < $y)); then
echo "X is less than Y"
elif (($x > $y)); then
echo "X is greater than Y"
else
echo "X is equal to Y"
fi


while
============
 x=1
while [ $x -le 5 ]
do
  echo "Welcome $x times"
  x=$(( $x + 1 ))
done


FILE=$1
# read $FILE using the file descriptors
exec 3<&0
exec 0<$FILE
while read line
do
	# use $line variable to process line
	echo $line
done
exec 0<&3



for
============
for number in {1..99..5}
do
    echo $number
done

Arithmetic
===================
#!/bin/bash
read x
read y

echo $((x + y))
echo $((x - y))
echo $((x * y))
echo $((x / y))


sed
====================================



grep
======================================


find
======================================




extras
--------------------------------------------
for loop :

for i in $( ls ); do
echo item: $i
done

while loop :

#!/bin/bash
COUNTER=0
while [ $COUNTER -lt 10 ]; do
echo The counter is $COUNTER
let COUNTER=COUNTER+1
done

until loop :

#!/bin/bash
COUNTER=20
until [ $COUNTER -lt 10 ]; do
echo COUNTER $COUNTER
let COUNTER-=1
done
-----------------------------------------------

echo techniques
--------------------------------------------------------------
echo ${variable:11:6} --- print string in a sentence

echo ${variable#*:*:*:} --- print complete sentence

${#variable}  ---- length of a variable

echo ${variable: -5}  --- last 5 char of variable

${variable:-10} - gives 10 if variable was not assigned before
${variable: -10} - gives last 10 symbols of variable

echo ${variable//pattern/replacement} --- sbstitute[ $a == $b ] - should be used for string comparison
[ $a -eq $b ] - should be used for number tests
