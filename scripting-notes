$#    Stores the number of command-line arguments that 
      were passed to the shell program.
$?    Stores the exit value of the last command that was 
      executed.
$0    Stores the first word of the entered command (the 
      name of the shell program).
$*    Stores all the arguments that were entered on the
      command line ($1 $2 ...).
"$@"  Stores all the arguments that were entered
      on the command line, individually quoted ("$1" "$2" ...)
$$ gives the process id of the currently executing process 
$! shows the process id of the process that recently went into background.

Syntax
-------------------------------------
if
============

if i in [1..99] then
echo "Hi"
fi

if nested
============
read value
if (( "$value"=="y" || "$value"=="Y" )); then
echo "YES"
elif (( "$value"=="N" || "$value"=="n" )); then
echo "NO"
else
echo "please enter valid input : 'Y', 'y', 'N', 'n'"
fi

#!/bin/bash
read x
read y
if (($x < $y)); then
echo "X is less than Y"
elif (($x > $y)); then
echo "X is greater than Y"
else
echo "X is equal to Y"
fi


if options
===============================
-f
-r
-x
-w
-d
-e

while
============
 x=1
while [ $x -le 5 ]
do
  echo "Welcome $x times"
  x=$(( $x + 1 ))
done


FILE=$1
# read $FILE using the file descriptors
exec 3<&0
exec 0<$FILE
while read line
do
	# use $line variable to process line
	echo $line
done
exec 0<&3



for
============
for number in {1..99..5}
do
    echo $number
done

Arithmetic
===================
#!/bin/bash
read x
read y

echo $((x + y))
echo $((x - y))
echo $((x * y))
echo $((x / y))


sed
====================================

sed -e 's/ \ /[^/]*.php$/ \ /removed/' pattern1.txt 
sed -e 's/   \/[^/]*.php$/ \/removed/

sed -e 'sub/  pattern/   action/'

awk
=====================================
awk '{ print; }' fname


grep - search and filter patterns
======================================
grep options action name
options
----------
-i ignore case
-v invert match
-m maxmatches
-n linenmber
-B before
-A after
-C before and after
-c count
-o only matched
-b position nmber

patterns
------------
"^[[:alpha:]]"
"[[:alpha:]]$"
"[[:alpha:]]*"   
"^[[:alpha:]]$"  same as above
"^[[:alpha:]]$*" 1st char alpha remaining char/alpha
"^[[:alpha:]]*$" 1st and last alpha between any char/num



"[[:alpha:]]"
"[[:digit:]]"
"[[:lower:]]"
"[[:upper:]]"
"[[:blank:]]"
"[[:space:]]"
"[[:xdigit:]]"
"[[:punct:]]"


awk -F : '{ print $2 }' fname | grep "^[[:alpha:]]"

examples
--------------
grep -v "#" fname -- remove comments from file and display contents
find . –name “*.mp3” | grep –i JayZ | grep –vi “remix”
grep root -A/B 1 /etc/passwd
grep root -C 2 /etc/passwd
grep root -c /etc/passwd
grep -n root /etc/passwd
grep -r "root" *
zgrep -i patternname zipfilename
grep pattern file1 file2
grep ip file
grep -w ip file
grep -A/B/C count pattern file
grep -c pattern file
grep -o -n -b pattern file




find - files/dir
======================================
find location option name
find .        -name   passwd
options
===============
-type
-name
-iname
-perm
-size
-m/a/ctime
-m/a/cmin
-user
-group
-maxdepth
-empty
-readable
-writable

actions

-print
-delete
-exec

----------------------------------
Examples

find /etc -iname passwd
find / -type d -iname dname
find / -type f -iname fname
find / -type f -perm 777 -print
find / -type f ! -perm 777
find / -perm /u=s
find / -perm /u=r or /a=x or /g=s 
find / -type f -perm 0777 -print -exec chmod 644 {} \;
find . -type f -name "fname or *.extention" -exec rm -f {} \;
find / -type ford -empty
find / -type ford ".*"
find / -user uname
find / -user name fnameordname
find / -group gname
find / -mtime 50
find / -atime 50
find / -mtime +50 -mtime -100
find / -cmin 60
find / -amin 60
find / -size +50M -size -100M
find / -size +100M -exec rm -rf {} \;
find / -name "fname.ext" -size +100M -exec rm -rf {} \;
find . -maxdepth 1 -newer<m/a/c>t "2018-04-12"

extras
--------------------------------------------
for loop :

for i in $( ls ); do
echo item: $i
done

while loop :

#!/bin/bash
COUNTER=0
while [ $COUNTER -lt 10 ]; do
echo The counter is $COUNTER
let COUNTER=COUNTER+1
done

until loop :

#!/bin/bash
COUNTER=20
until [ $COUNTER -lt 10 ]; do
echo COUNTER $COUNTER
let COUNTER-=1
done
-----------------------------------------------

echo techniques
--------------------------------------------------------------
echo ${variable:11:6} --- print string in a sentence

echo ${variable#*:*:*:} --- print complete sentence

${#variable}  ---- length of a variable

echo ${variable: -5}  --- last 5 char of variable

${variable:-10} - gives 10 if variable was not assigned before
${variable: -10} - gives last 10 symbols of variable

echo ${variable//pattern/replacement} --- sbstitute[ $a == $b ] - should be used for string comparison
[ $a -eq $b ] - should be used for number tests
