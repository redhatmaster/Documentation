steps for docker project1 configuration

Docker: 
=====================================
1.update yum : 

yum update

2. Configure repo as below in the file /etc/yum.repo.d/redhat.repo
[dockerrepo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/7/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg


3.yum repolist all
4.yum install docker*

verify if installed!!

docker --version

Gradle :
=========================================================
1.Download gradle from "install manually": https://gradle.org/install

2.Extract in /opt

Follow below steps
--------------------
3. alternatives --install /usr/bin/gradle gradle /opt/<gradle-4.0.2>/bin/gradle 200000

verify if installed!!
alternatives --config gragle
gradle --version


Create WAR file
{follow link for creating war file in eclipse : https://www.tutorialspoint.com/restful/restful_first_application.htm}
======================================================================

create 3 files .java, .gradle , .jsp --- as below 

[root@redhatmaster devopsproject1]# ls
build.gradle  HelloWorld.java  index.jsp
[root@redhatmaster devopsproject1]# more build.gradle 
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
[root@redhatmaster devopsproject1]# more HelloWorld.java 
package com.thejavageek.gradle;
 
public class HelloWorld {
 
	public String sayHello() {
		return "Saying hello from a gradle web app bean";
	}
 
}
[root@redhatmaster devopsproject1]# more index.jsp 
<jsp:useBean id="helloWorld" class="com.thejavageek.gradle.HelloWorld"/>
<html>
<p>${helloWorld.sayHello()}</p>
</html>	

Build the files
-------------------------------------------
[root@redhatmaster devopsproject1]# gradle build

BUILD SUCCESSFUL in 8s
1 actionable task: 1 executed

verify for build directory and war file
----------------------------------------------

[root@redhatmaster devopsproject1]# ls
build  build.gradle  HelloWorld.java  index.jsp
[root@redhatmaster devopsproject1]# cd build/
[root@redhatmaster build]# ls
libs  tmp
[root@redhatmaster build]# ls -l
total 0
dr-x-wxr-x. 2 root root 32 Oct 23 14:25 libs
dr-x-wxr-x. 3 root root 17 Oct 23 14:25 tmp
[root@redhatmaster build]# cd libs/
[root@redhatmaster libs]# ls -l
total 4
-r---w-r--. 1 root root 261 Oct 23 14:25 devopsproject1.war
[root@redhatmaster libs]# cd ..
[root@redhatmaster build]# pwd
/root/devopsproject1/build



Download Liberty container

=======================================

Run below commad
---------------------
docker pull websphere-liberty

verify installed images
-----------------------
docker images


Run Docker 
-----------

docker run -d -p 9080:9080 <imageID>

connect to container
-------------------------
docker ps
docker exec -ti <first3digitsofcontainerID> /bin/bash


copy created war file from local to container 
--------------------------------------------------

docker cp <source(localfilename)> <containerID:destination(dropinsfolder)>

example : docker cp devopsproject1.war 689f5d27a416:/opt/ibm/wlp/usr/servers/defaultserver/dropins



Hint : Copying files from container to local : docker cp containerID:source localdestdirectory


NOTE : IF vi command not found ,follow below steps.
-----------------------------------------------------------

apt-get update

apt-get install python-software-properties

apt-get install apt-file

apt-file update

apt-get install software-properties-common

apt-get install vim

------------------------------------------------------------


===============================================================================================================

Deploy a web application to the Liberty profile
-------------------------------------------------
By deploying a helloworld.war application, we can learn how server configurations change in the Liberty profile.

The helloworld.war application uses a simple servlet to display a message on your browser. We can create any other messages to be displayed. The coding of the application is not described within the Liberty profile documents. When you deploy a web application to the Liberty profile when the server is up and running, all configurations related to the application are automatically enabled in server.xml. However, we can also configure server.xml manually by completing the following steps.

This example uses the helloworld.war application and can be accessed via http://localhost:9090/helloworld. In this example, we create a Liberty profile server instance and change its default HTTP port to 9090, then deploy the application on it.

    Create a server named hwserver using the command server create hwserver.

    Create a directory apps for application deployment under the newly created server directory. The directory should be like /usr/servers/hwserver/apps.
    Copy the helloworld.war application into the apps directory created.
    Change the default HTTP port of the server hwserver to 9090 by adding the following line into server.xml.

        < httpEndpoint id="defaultHttpEndpoint" host="*" httpPort="9090" />

    Configure the application by updating the server.xml as follows:

    <server description="Hello World Server"> 
     < featureManager>
       <feature>servlet-3.0</feature>  </featureManager> 
    < httpEndpoint id="defaultHttpEndpoint" host="*" httpPort="9090" /> 
    <application context-root="helloworld" type="war" id="helloworld" 
        location="helloworld.war" name="helloworld"/> 
    </server>

    Where context-root specifies the entry point of the deployed application. The entry point of a deployed application is determined in the following precedence:

        context-root in server.xml
        application.xml, if an EAR application
        ibm-web-ext.xml, if a web application
        name of the application in server.xml, if a web application
        Manifest.MF, if a WAB application
        Directory name or the file name relative to the "dropins" directory of the Liberty profile 

    Start the server in foreground using the command server run hwserver.
    Test the application at http://localhost:9090/helloworld.
    Optional: Stop the server if we don't need it. 

===============================================================================================================


GIT Installation
=================================

pre-requisites
----------------------------
yum install gettext-devel expat-devel curl-devel zlib-devel openssl-devel -y
cd /usr/local/src
wget https://www.kernel.org/pub/software/scm/git/git-1.8.2.3.tar.gz
ls
tar -xvf git-1.8.2.3.tar.gz 


============================================

Jenkins setup
=========================================
Java should be jdk 1.8
apache tomcat 9
-----------------
https://tomcat.apache.org/download-90.cgi#9.0.1
tar -xvf apache-tomcat-9.0.1.tar.gz
cd apache-tomcat-9.0.1/
edit file conf/tomcatusers.xml
<role rolename="manager-gui"/>
  <role rolename="manager-script"/>
  <role rolename="manager-jmx"/>
  <role rolename="manager-status"/>
  <role rolename="admin-gui"/>
  <role rolename="admin-script"/>
  <user username="redhatmaster" password="devops1" roles="manager-gui,manager-script,manager-jmx,manager-status,admin-gui,admin-script"/>
./bin/startup.sh 
test tomcatserver in browser
---------------------
http://localhost:8080/

download jenkins 2.7.3 from : https://updates.jenkins-ci.org/download/war/
https://www.youtube.com/watch?v=GkyUSSajFEg

follow above steps in youtube for deploying jenkins war and launching jenkins.



GIT Repository
================================================
After creating GIT Id and Password , Git repository and copying SSH key to kit
cd /root/
mkdir git
cd git
which git
git clone <copy from git@github.com:visahis/tutorialspoint.git>
ls
cd tutorialspoint/
cp -r /home/redhatmaster/eclipse-workspace/UserManagement .
ls
UserManagement/
ls
cd ..
git status -s
git branch 
git add .
git status -s
git commit -m "checkin User Management Folder"
git config --global user.email "vissa.pallavi@gmail.com"
git config --global user.name "redhatmaster"
git commit -m "checkin User Management Folder"
git status -s
pwd
ls -al
cd .git/
ls
cd ..
git log
git push origin master

Refresh browser and check in Git repositories for UserManagement directory files

Open eclipse and rename project as old.

Now try pulling code from git hub and perform changes and commit to git hub back : as below.
-------------------------------------------------------------------------------------- 
eclipse - window -- showview --- other --- git repositories , git staging

you will find no repositories.Right click on git repositories tab --- import project --- select projects and finish

you will find usermanagement project in the project explorer.

Now perform some changes in build.gradle
save
you will find changes in staging
drag and drop to bottom box
commit and push changes
verify in github



Ids
===============
GIT - redhatmaster psw - devops#1
GIT organisation : visahis

jenkins - redhatmaster psw - devops1

git@github.com:visahis/UserManagement.git








